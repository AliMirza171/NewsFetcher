// NewsApiService.kt
// This interface defines our API service using Retrofit
import retrofit2.http.GET
import retrofit2.http.Query

interface NewsApiService {
    @GET("top-headlines")
    suspend fun getLatestNews(
        @Query("country") country: String = "us", // Fetch news for a specific country
        @Query("apiKey") apiKey: String = "YOUR_NEWSAPI_KEY" // Replace with your API key
    ): NewsResponse
}

// NewsResponse.kt
// Data model for API response containing a list of articles
data class NewsResponse(val articles: List<Article>)
data class Article(val title: String, val description: String?)

// RetrofitClient.kt
// Singleton object to create and provide Retrofit instance
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object RetrofitClient {
    private val retrofit = Retrofit.Builder()
        .baseUrl("https://newsapi.org/v2/") // Base URL for News API
        .addConverterFactory(GsonConverterFactory.create()) // Convert JSON to Kotlin objects
        .build()

    val api: NewsApiService = retrofit.create(NewsApiService::class.java) // Create API service instance
}

// NewsWorker.kt
// Worker that runs in the background to fetch news and show a notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import androidx.core.app.NotificationCompat
import androidx.work.CoroutineWorker
import androidx.work.WorkerParameters

class NewsWorker(context: Context, workerParams: WorkerParameters) : CoroutineWorker(context, workerParams) {
    override suspend fun doWork(): Result {
        return try {
            val latestHeadline = fetchLatestNews()
            if (latestHeadline.isNotEmpty()) {
                showNotification(latestHeadline) // Display notification with latest headline
            }
            Result.success()
        } catch (e: Exception) {
            e.printStackTrace()
            Result.retry() // Retry in case of failure
        }
    }

    private suspend fun fetchLatestNews(): String {
        return try {
            val response = RetrofitClient.api.getLatestNews()
            response.articles.firstOrNull()?.title ?: "No news available" // Get first news title or fallback
        } catch (e: Exception) {
            "Failed to fetch news" // Return error message in case of failure
        }
    }

    private fun showNotification(newsHeadline: String) {
        val notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        val channelId = "news_channel"
        
        // Create notification channel for Android Oreo and above
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(channelId, "News Updates", NotificationManager.IMPORTANCE_HIGH).apply {
                description = "Channel for News Notifications"
            }
            notificationManager.createNotificationChannel(channel)
        }

        // Intent to open MainActivity when user taps notification
        val intent = Intent(applicationContext, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            applicationContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // Build and show notification
        val notification = NotificationCompat.Builder(applicationContext, channelId)
            .setSmallIcon(R.drawable.ic_news) // Set a proper icon for notification
            .setContentTitle("Latest News")
            .setContentText(newsHeadline)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true) // Remove notification when tapped
            .setContentIntent(pendingIntent)
            .build()

        notificationManager.notify(1, notification) // Show the notification
    }
}

// MainActivity.kt
// Main Activity where WorkManager is scheduled
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.work.*
import java.util.concurrent.TimeUnit

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        scheduleNewsFetchWorker() // Schedule WorkManager to fetch news periodically
    }

    private fun scheduleNewsFetchWorker() {
        val workRequest = PeriodicWorkRequestBuilder<NewsWorker>(15, TimeUnit.MINUTES)
            .setConstraints(
                Constraints.Builder()
                    .setRequiredNetworkType(NetworkType.CONNECTED) // Ensure network is available
                    .build()
            )
            .build()

        // Enqueue unique periodic work to prevent duplicate workers
        WorkManager.getInstance(this).enqueueUniquePeriodicWork(
            "NewsFetchWork",
            ExistingPeriodicWorkPolicy.KEEP,
            workRequest
        )
    }
}

// AndroidManifest.xml
// Permissions and application settings
<uses-permission android:name="android.permission.INTERNET"/> <!-- Required for API calls -->

<application>
    <uses-library android:name="org.apache.http.legacy" android:required="false"/> <!-- Optional legacy HTTP support -->
</application>
